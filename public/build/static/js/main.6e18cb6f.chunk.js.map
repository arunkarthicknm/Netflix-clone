{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","src","poster_path","backdrop_path","alt","name","id","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","console","log","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e18cb6f.chunk.js","sourcesContent":["  \r\nimport axios  from 'axios' ;\r\n//base URL to make request to the movie database//\r\nconst instance = axios.create({\r\n   baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst base_url= \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title,fetchUrl, isLargeRow}) {\r\n    const [movies, setMovies] = useState([]);\r\n    \r\n\r\n    useEffect(() => {\r\n\r\n      async function fetchData() {\r\n    const request = await axios.get(fetchUrl);\r\n    setMovies(request.data.results);\r\n    return request;\r\n      }\r\n      fetchData();\r\n         }, [fetchUrl] );\r\n\r\n    return (\r\n\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n            {/*several row posters*/}\r\n                {movies.map((movie) => (\r\n                <img \r\n                key={movie.id}\r\n                \r\n                className= {`row_poster ${isLargeRow && \"row_posterlarge\"}`}\r\n                src={`${base_url}${  isLargeRow ? movie.poster_path : movie.backdrop_path }`}\r\n                alt={movie.name}\r\n                />\r\n                ))}\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\nexport default Row;","const API_KEY = \"1694d151ddd67c42652a2f8766c61104\";\r\n\r\nconst requests = {\r\n    \r\n  fetchTrending : `/trending/all/week?api_key=${API_KEY}&language=en=us`,\r\n  fetchNetflixOriginals : `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated : `/movie/top_rated?api_key=${API_KEY}&language=en=us`,\r\n  fetchActionMovies : `/discover/movie?api_key=${API_KEY}&with_generes=28`,\r\n  fetchComedyMovies : `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies : `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies : `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries : `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport requests from \"./requests\";\r\nimport './Banner.css';\r\n\r\n\r\nfunction Banner() {\r\n    const [movie,setMovie] =useState ([]);\r\n    useEffect (() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1 )]\r\n        );\r\n                return request;\r\n            }\r\n            \r\n        fetchData ();\r\n    },[]);\r\n    console.log(movie);\r\n    /* to maintain the overflow for the description we are using overflow function below*/\r\n    function truncate(str, n) {\r\n        return str?.length.n ? str.substr(0, n-1) + \"...\" : str;\r\n    }\r\n    return (\r\n        <header className = \"banner\"\r\n        style={{\r\n            backgroundSize : \"cover\",\r\n            backgroundImage : `url(\r\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition : \"center center\",\r\n        }}\r\n        >\r\n        <div className = \"banner__contents\">\r\n        <h1 className=\"banner__title\"> { movie?.title || movie?.name || movie?.original_name }\r\n        </h1>\r\n        <div className = \"banner__button\" >\r\n        <button className = \"banner__button\">Play</button>\r\n        <button className = \"banner__button\">My List</button>\r\n           \r\n        </div>\r\n        <h1 className=\"banner__description\">\r\n        {truncate (movie?.overview, 100)}</h1>\r\n        </div>\r\n        <div className=\".banner__fadeBottom \"></div>\r\n        </header>\r\n   \r\n      \r\n    )\r\n}\r\n\r\nexport default Banner","import React, {useEffect, useState} from 'react'\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n    useEffect (() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            }\r\n        else handleShow(false);\r\n        });\r\n        return ()=> {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    },[]);\r\n  return (\r\n    <div className = {`nav ${show && \"nav__black\"}`}>\r\n      <img \r\n        className= \"nav__logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\r\n        alt=\"Netflix Logo\"\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './App.css';\r\nimport Row from './Row';\r\nimport requests from './requests';\r\nimport Banner from './Banner'\r\nimport Nav from './Nav';\r\n\r\nfunction App() {\r\n  return (\r\n    <div  className=\"App\">\r\n      <Nav />\r\n      <Banner/>\r\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow={true}/>\r\n      <Row title=\"TRENDING NOW\" fetchUrl={requests.fetchTrending}/>\r\n      <Row title=\"TOP RATED\" fetchUrl={requests.fetchTopRated}/>\r\n      <Row title=\"ACTION MOVIES\" fetchUrl={requests.fetchActionMovies}/>\r\n      <Row title=\"COMEDY MOVIES\" fetchUrl={requests.fetchComedyMovies}/>\r\n      <Row title=\"HORROR MOVIES\" fetchUrl={requests.fetchHorrorMovies}/>\r\n      <Row title=\"ROMANCE MOVIES\" fetchUrl={requests.fetchRomanceMovies}/>\r\n      <Row title=\"DOCUMENTARIES\" fetchUrl={requests.fetchDocumentaries}/>\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}